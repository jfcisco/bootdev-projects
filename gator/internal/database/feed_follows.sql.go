// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed_follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH new_follow AS (
    INSERT INTO feed_follows (
        id, created_at, updated_at, user_id, feed_id
    ) VALUES (
        DEFAULT,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        $1,
        $2
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT
    nf.id,
    feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id, feeds.last_fetched_at,
    users.id, users.created_at, users.updated_at, users.name
FROM new_follow AS nf
JOIN feeds ON nf.feed_id = feeds.id
JOIN users ON nf.user_id = users.id
`

type CreateFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

type CreateFeedFollowRow struct {
	ID   uuid.UUID
	Feed Feed
	User User
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.UserID, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.Feed.ID,
		&i.Feed.CreatedAt,
		&i.Feed.UpdatedAt,
		&i.Feed.Name,
		&i.Feed.Url,
		&i.Feed.UserID,
		&i.Feed.LastFetchedAt,
		&i.User.ID,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.Name,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows USING feeds
WHERE feed_follows.user_id = $1 AND feed_id = feeds.id AND feeds.url = $2
`

type DeleteFeedFollowParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.Url)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
    feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id, feeds.last_fetched_at, users.id, users.created_at, users.updated_at, users.name
FROM feed_follows AS follow
JOIN feeds ON follow.feed_id = feeds.id
JOIN users ON follow.user_id = users.id
WHERE users.name = $1
`

type GetFeedFollowsForUserRow struct {
	Feed Feed
	User User
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.Feed.ID,
			&i.Feed.CreatedAt,
			&i.Feed.UpdatedAt,
			&i.Feed.Name,
			&i.Feed.Url,
			&i.Feed.UserID,
			&i.Feed.LastFetchedAt,
			&i.User.ID,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
